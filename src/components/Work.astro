
<section id="work" class="work full-bleed">
    <h2>Work</h2>
    <div class="accordion">

    </div>

    <template id="work-item">
        <div class="accordion-item">
            <button class="accordion-trigger" aria-expanded="false">
                <img class="accordion-image" src="" alt="">
                  <div class="title-and-trigger">
                    <h4 class="accordion-title"></h4>
                    <svg class="accordion-trigger-icon" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path fill="currentColor" d="M11 13H5v-2h6V5h2v6h6v2h-6v6h-2v-6Z" /></svg>
                  </div>
                    <div class="accordion-pills">
                      <p class="accordion-pill"></p>
                    </div>
            </button>
            <div class="accordion-content" aria-hidden="true">
                <article class="accordion-text"></article>
            </div>
        </div>
    </template>
</section>

<style>

    .accordion-image {
      aspect-ratio: 1;
      object-fit: cover;
      transition: var(--transition);
    }

    .accordion-item:hover .accordion-image {
      scale: .95;
      transition: var(--transition);
      box-shadow: 0 0 10px var(--accent);
      border-radius: 5px;
      transition: var(--transition);
    }

.accordion-item:hover .accordion-trigger-icon path{
  fill: var(--accent);
  transition: var(--transition);
}



    .accordion {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
      gap: var(--space-xl);
    }

    .accordion-title {
      margin-top: var(--space-s);
      text-align: left;
    }

    .accordion-trigger {
    display: grid;
    grid-template-rows: subgrid;
    grid-row: span 3;
    }

    .accordion-trigger-icon {
        transition: var(--transition);
    }



    .accordion-item {
    grid-row: auto / span 4;
    display: grid;
    grid-template-rows: subgrid;
    transition: var(--transition);
    row-gap: 0;
    }

    /* .accordion-image {
    grid-row: 1 / -1;
    grid-column: 1 / -1;
    } */

    .title-and-trigger {
      display: flex;
      place-items: baseline;
      justify-content: space-between;
      /* grid-row: 1;
      grid-column: 1; */
    }

    .title-and-trigger, .accordion-pills {
      padding-inline: .5rem;
    }

    .accordion-pills {
      display: flex;
      flex-flow: wrap;
      font-size: var(--fs-small);
      gap: .3rem;
      /* grid-row: 2;
      grid-column: 1; */
    }

    .accordion-content {
      display: grid;
      grid-template-rows: 0fr;
      transition: grid-template-rows 500ms;
    }

    .accordion-text {
      overflow: hidden;
      padding-inline: .5rem;
      padding-top: var(--space-s);
    }

    .accordion-content[aria-hidden="false"] {
grid-template-rows: 1fr;
    }


    .accordion-trigger[aria-expanded="true"] .accordion-trigger-icon {
  transform: rotate(45deg);
  transition: var(--transition);
}
    
</style>

<script>
    export async function getWorkData() {
  const options = {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: "08ea7024221413272431b8c2343512", // Replace with your actual access token
    },
    body: JSON.stringify({
      query: `query MyQuery {
  allWorks {
    workHeader
    workHeroImage {
      alt
      url
    }
    workSkill {
      skill
    }
    workText
    workType
  }
}`,
    }),
  };

  try {
    const res = await fetch("https://graphql.datocms.com/", options);
    const data = await res.json();
    return data; // Return the data
  } catch (error) {
    console.error("Error fetching data:", error);
    throw error;
  }
}

getWorkData()
  .then((workData) => {
    showWorkData(workData);
    console.log("work data", workData);
    console.log(workData.data.allWorks);
  })
  .catch((error) => {
    // Handle errors here
  });


function showWorkData(workData) {
  workData.data.allWorks.forEach((project) => {
    const workClone = document.querySelector("#work-item").content.cloneNode(true);

    let workImage = workClone.querySelector(".accordion-image");
    let workTitle = workClone.querySelector(".accordion-title");
    let workText = workClone.querySelector(".accordion-text");
    
    workImage.src = project.workHeroImage.url;
    workImage.alt = project.workHeroImage.alt;
    workTitle.textContent = project.workHeader;
    workText.innerHTML = project.workText;

    let accordionPillsContainer = workClone.querySelector(".accordion-pills");

    // Clear any existing content inside .accordion-pills div
    accordionPillsContainer.innerHTML = "";

    // Append each workSkill to the existing <p> elements with class .accordion-pill
    project.workSkill.forEach((workSkill) => {
      let pill = document.createElement("p");
      pill.className = "accordion-pill";
      pill.textContent = workSkill.skill;
      accordionPillsContainer.appendChild(pill);
    });

    document.querySelector(".accordion").appendChild(workClone);
  });
}

const accordion = document.querySelector(".accordion");

accordion.addEventListener("click", (e) => {
  const activePanel = e.target.closest(".accordion-item");
  if (!activePanel) return;
  toggleAccordion(activePanel);
});

function toggleAccordion(panelToActivate) {
  const activeButton = panelToActivate.querySelector(".accordion-trigger");
  const activePanel = panelToActivate.querySelector(".accordion-content");
  const activePanelIsOpened = activeButton.getAttribute("aria-expanded");

  if (activePanelIsOpened === "true") {
    panelToActivate
      .querySelector("button")
      .setAttribute("aria-expanded", false);

    panelToActivate
      .querySelector(".accordion-content")
      .setAttribute("aria-hidden", true);
  } else {
    panelToActivate.querySelector("button").setAttribute("aria-expanded", true);

    panelToActivate
      .querySelector(".accordion-content")
      .setAttribute("aria-hidden", false);
  }
}

</script>